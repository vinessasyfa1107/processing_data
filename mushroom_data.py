# -*- coding: utf-8 -*-
"""Mushroom Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FDRH9dLyZEVjTpXwjwVdLj_IeDZpP1z1

# **Import Data and Library**
"""

import numpy as np
import pandas as pd

import os
for dirname, _, filenames in os.walk('mushrooms.csv'):
  for filename in filenames:
    print(os.path.join(dirname, filename))

mushroom_data = pd.read_csv("mushrooms.csv")

"""# **Exploring Data**"""

# Menampilkan beberapa baris pertama dari DataFrame yang sudah dibuat sebelumnya
mushroom_data.head()

#Menampilkan kolom apa saja yang ada di dataset
mushroom_data.columns

#Menampilkan jumlah baris dan kolom, ada 8124 baris dan 23 kolom
mushroom_data.shape

#Melihat nilai kosong pada setiap kolom
mushroom_data.isnull().sum()

#Menganalisis deskriptif pada setiap kolom DataFrame
for i in mushroom_data.columns:
  print(mushroom_data[i].value_counts(normalize=True)*100)
  print(mushroom_data[i].nunique())
  print("****************************************")

#Membuat analisis statistik dari DataFrame
mushroom_data.describe().T

#Menampilkan tipe data dari setiap kolom DataFrame
mushroom_data.dtypes

#Mengubah tipe data menjadi setiap kolom menjadi "Category"
mushroom_data=mushroom_data.astype("category")
mushroom_data.info()

#Menghapus kolom "veil-type" karena tidak relevan
mushroom_data.drop(columns="veil-type",inplace=True,axis=1)

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

mushroom_data.head()

"""# Visualisasi **Data**"""

#Membuat pie chart dengan ukuran size dan kolom "class"
plt.figure(figsize=[10,10])
fig = px.pie(mushroom_data,names='class')
fig.show()

#Multiple count plots yang menunjukkan distribusi kelas untuk setiap fitur dalam dataset
plt.figure(figsize=(18,55))
plotnumber = 1
for col in mushroom_data.columns:
  plt.subplot(8, 3, plotnumber)
  sns.countplot(data=mushroom_data, x=col, hue="class")
  plt.xlabel(col, fontsize=15)
  plotnumber += 1

plt.show()

"""# **Preprocessing Data**"""

#Memisahkan variabel x adalah variabel independen dari dataset
#Memisahkan variabel y adalah variabel dependen dari dataset
X=mushroom_data.drop(["class"],axis=1)
y=mushroom_data['class']

#Memisahkan antara data training dan data testing
from sklearn.model_selection import train_test_split
X_train,X_test, y_train, y_test=train_test_split(X,y,test_size=0.30,random_state=123)

#Mengubah nilai menjadi nilai numerik
from sklearn.preprocessing import LabelEncoder
Encoder_X = LabelEncoder()
for col in X.columns:
  X_train[col] = Encoder_X.fit_transform(X_train[col])
  X_test[col] = Encoder_X.fit_transform(X_test[col])
Encoder_y = LabelEncoder()
y_train = Encoder_y.fit_transform(y_train)
y_test = Encoder_y.fit_transform(y_test)

X_train

# Mengubah data latihan ke dalam skala yang sama
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Menggunakan Logistic Regression
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.linear_model import LogisticRegression
logi = LogisticRegression()
logi.fit(X_train,y_train)

# train_pred=logi.predict(X_train)
test_pred=logi.predict(X_test)
print('classification_report of logisticRegression\n\n', classification_report(y_test,test_pred))

# Menampilkan confusion matrix dari hasil prediksi model
cm = confusion_matrix(y_test, test_pred)
print('confusion matrix of LogisticRegression\n', cm)

# Visualisasi heatmap Confusion Matrix model Logistic Regression
x_axis_labels = ["Edible","Poisonous"]
y_axis_labels = ["Edible","Poisonous"]

f, ax = plt.subplots(figsize = (5,5))
sns.heatmap(cm, annot = True, cmap="Greens", fmt=".0f", linewidths=0.9, linecolor="black", xticklabels=x_axis_labels,yticklabels=y_axis_labels)
plt.xlabel("predicted")
plt.ylabel("actual values")
plt.title('Confusion Matrix for LogisticRegression\n\n')
plt.show()

# Menerima laporan klasifikasi dari hasil prediksi menggunakan model Decision Tree Classifier
print("Decision Tree Classifier report : \n\n", classification_report(y_test, test_pred))

# Menampilkan confusion matrix dari model Decision Tree Classifier
cm = confusion_matrix(y_test, test_pred)
print('confusion matrix oof DecisionTreeClassifier \n', cm)

# Visualisasi heatmap Confusion Matrix model Decision Tree Classifier
x_axis_labels = ["Edible", "Poisonous"]
y_axis_labels = ["Edible", "Poisonous"]

f, ax = plt.subplots(figsize=(5,5))
sns.heatmap(cm, annot = True, cmap="Greens", fmt=".0f", linewidths=0.9, linecolor="black", xticklabels=x_axis_labels,yticklabels=y_axis_labels)
plt.xlabel("predicted")
plt.ylabel("actual values")
plt.title('Confusion Matrix for DecisionTreeClassifier \n\n')
plt.show()

"""**Hasil Visualisasi Data**

Dataset terdiri dari dua kelas utama: jamur beracun dan jamur yang dapat dimakan. Proporsi antara kedua kelas ini harus dianalisis untuk memastikan keseimbangan data dan mempengaruhi strategi pemodelan. Logistic Regression sebagai model klasifikasi dasar. Model ini dilatih pada data yang telah dinormalisasi dan diuji menggunakan data uji. Melalui analisis ini, kita dapat memahami faktor-faktor yang mempengaruhi klasifikasi jamur, serta membangun model yang dapat memprediksi dengan akurasi yang baik apakah suatu jamur beracun atau dapat dimakan. Langkah-langkah preprocessing seperti encoding dan normalisasi data sangat penting untuk mencapai kinerja model yang optimal.
"""